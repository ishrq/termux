# Function
snippet fun "function"
    function ${1:function_name}(${2}) {
        ${0:${VISUAL}}
    }

# Asynchronous Function
snippet asf "async function"
    async function ${1:function_name}(${2}) {
        ${0:${VISUAL}}
    }

# Anonymous Function
snippet anf "" w
    function(${1}) {
        ${0:${VISUAL}}
    }

# Anonymous Function assigned to variable
snippet vaf
    var ${1:function_name} = function(${2}) {
        ${0:${VISUAL}}
    };

# Function assigned to variable
snippet vf
    var ${1:function_name} = function $1(${2}) {
        ${0:${VISUAL}}
    };

# Immediate function
snippet (f
        (function(${1}) {
             ${0:${VISUAL}}
         }(${2}));

# self-defining function
snippet sdf
        var ${1:function_name} = function (${2:argument}) {
            ${3}

            $1 = function ($2) {
                ${0:${VISUAL}}
            };
        };

# Flow control

# if
snippet if "if (condition) { ... }"
    if (${1:true}) {
    ${0:${VISUAL}}
    }

# if ... else
snippet ife "if (condition) { ... } else { ... }"
    if (${1:true}) {
        ${0:${VISUAL}}
    } else {
        ${2}
    }

# tertiary conditional
snippet ter Ternary: `condition ? true : false`
    $1 ? $2: $0

# switch
snippet switch
    switch (${1:expression}) {
        case '${3:case}':
            ${4}
            break;
            ${0}
        default:
            ${2}
    }

snippet case "case 'xyz': ... break"
    case '${1:case}':
        ${0:${VISUAL}}
        break;

snippet try "try { ... } catch(e) { ... }"
    try {
        ${0:${VISUAL}}
    } catch (${1:e}) {
        ${2:/* handle error */}
    }

snippet tryf "try { ... } catch(e) { ... } finally { ... }"
    try {
        ${0:${VISUAL}}
    } catch (${1:e}) {
        ${2:/* handle error */}
    } finally {
        ${3:/* be executed regardless of the try / catch result*/}
    }

# throw Error
snippet terr
    throw new Error('${1:error message}')

# return
snippet ret
    return ${0:result};

snippet for "for (...) {...}"
    for (let ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
        ${0:${VISUAL}}
    }

snippet forr "reversed for (...) {...}"
    for (let ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
        ${0:${VISUAL}}
    }

snippet wh "(condition) { ... }"
    while (${1:true}) {
        ${0:${VISUAL}}
    }

snippet wht "(true) { ... }"
    while (true) {
        ${0:${VISUAL}}
    }

snippet do "do { ... } while (condition)"
    do {
        ${0:${VISUAL}}
    } while ($1);

# For in loop
snippet fori
    for (let ${1:prop} in ${2:object}) {
        ${0:$2[$1]}
    }

# Documentation

# docstring
snippet /**
    /**
     * ${0:description}
     *
    */

snippet @par
    @param {${1:type}} ${2:name} ${0:description}

snippet @ret
    @return {${1:type}} ${0:description}
